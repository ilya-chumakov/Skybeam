using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

using Skybeam.Abstractions;

// <auto-generated/>
namespace FancyGlobalPrefix.Skybeam.Tests.Snapshots.SameName.HandlerNamespace;

using InterfaceAlias = IRequestHandler<
    global::Skybeam.Tests.Snapshots.SameName.RequestNamespace.Foo,
    global::Skybeam.Tests.Snapshots.SameName.ResponseNamespace.Foo>;

using DelegateAlias = RequestHandlerDelegate<
    global::Skybeam.Tests.Snapshots.SameName.ResponseNamespace.Foo>;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Skybeam", "%VERSION%")]
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]

public class FooPipeline(IServiceProvider provider) : InterfaceAlias
{
    public Task<global::Skybeam.Tests.Snapshots.SameName.ResponseNamespace.Foo> HandleAsync(
        global::Skybeam.Tests.Snapshots.SameName.RequestNamespace.Foo input,
        CancellationToken ct = default)
    {
        var handler = provider.GetRequiredService<
            global::Skybeam.Tests.Snapshots.SameName.HandlerNamespace.Foo>();
        
        DelegateAlias original = () => handler.HandleAsync(input, ct);
        
        var b0 = provider.GetRequiredService<
            global::Skybeam.Tests.Snapshots.SameName.BehaviorNamespace.Foo<
                global::Skybeam.Tests.Snapshots.SameName.RequestNamespace.Foo,
                global::Skybeam.Tests.Snapshots.SameName.ResponseNamespace.Foo>>();
        
        DelegateAlias f0 = () => b0.HandleAsync(input, original, ct);
        
        return f0();
    }
}