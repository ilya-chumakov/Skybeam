using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

using Skybeam.Abstractions;

// <auto-generated/>
namespace FancyGlobalPrefix.Skybeam.Tests.Snapshots.CompositeHandler;

using InterfaceAlias = IRequestHandler<
    global::Skybeam.Tests.Snapshots.CompositeHandler.Alpha,
    global::Skybeam.Tests.Snapshots.CompositeHandler.Omega>;

using DelegateAlias = RequestHandlerDelegate<
    global::Skybeam.Tests.Snapshots.CompositeHandler.Omega>;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Skybeam", "%VERSION%")]
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]

public class BarHandlerPipeline(IServiceProvider provider) : InterfaceAlias
{
    public Task<global::Skybeam.Tests.Snapshots.CompositeHandler.Omega> HandleAsync(
        global::Skybeam.Tests.Snapshots.CompositeHandler.Alpha input,
        CancellationToken ct = default)
    {
        var handler = provider.GetRequiredService<
            global::Skybeam.Tests.Snapshots.CompositeHandler.BarHandler>(); 

        DelegateAlias original = () => handler.HandleAsync(input, ct);

        var b0 = provider.GetRequiredService<
            global::Skybeam.Tests.Snapshots.CompositeHandler.LogBehavior<
                global::Skybeam.Tests.Snapshots.CompositeHandler.Alpha,
                global::Skybeam.Tests.Snapshots.CompositeHandler.Omega>>();

        DelegateAlias f0 = () => b0.HandleAsync(input, original, ct);

        return f0();
    }
}