using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Skybeam;

public static class PipelineTextEmitter
{
    public static readonly AssemblyName EmitterAssemblyName = typeof(PipelineTextEmitter).Assembly.GetName();
    public const string NamespacePrefix = "FancyGlobalPrefix";

    public static (SourceText text, PipelineDescription pd) CreateSourceText(
        HandlerDescription handler,
        IReadOnlyList<BehaviorDescription> behaviors)
    {
        // Operating over type names everywhere
        string inputType = handler.InputFullName;
        string outputType = handler.OutputFullName;
        string handlerType = handler.FullName;

        string pipelineNamespace = $"{NamespacePrefix}.{handler.ContainingNamespace}";
        string pipelineType = $"{handler.Name}Pipeline{handler.PipelineSuffix}";

        PipelineDescription pd = new
        (
            HandlerDescription: handler,
            FullName: $"global::{pipelineNamespace}.{pipelineType}"
        );

        using var sw = new StringWriter();
        using var writer = new IndentedTextWriter(sw, "    ");

        writer.WriteLine("using System;");
        writer.WriteLine("using System.Threading;");
        writer.WriteLine("using System.Threading.Tasks;");
        writer.WriteLine();
        writer.WriteLine("using Skybeam;");
        writer.WriteLine("using Skybeam.Abstractions;");
        writer.WriteLine();
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine($"namespace {pipelineNamespace};");
        writer.WriteLine();
        
        // Class
        writer.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{EmitterAssemblyName.Name}\", \"{EmitterAssemblyName.Version}\")]");
        writer.WriteLine("[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]");
        writer.WriteLine($"public class {pipelineType}(IServiceProvider provider)");
        writer.Indent++;
        writer.WriteLine(": IRequestHandler<");
        writer.Indent++;
        writer.WriteLine($"{inputType},");
        writer.WriteLine($"{outputType}>");
        writer.Indent--;
        writer.Indent--;
        writer.OpenBlock();

        // Method
        writer.WriteLine($"public Task<{outputType}> HandleAsync(");
        writer.Indent++;
        writer.WriteLine($"{inputType} input,");
        writer.WriteLine("CancellationToken ct = default)");
        writer.Indent--;
        writer.OpenBlock();

        // Delegate
        writer.WriteLine("return PipelineBuilder.Decorate<");
        writer.Indent++;
        writer.WriteLine(handlerType + ",");
        writer.WriteLine(inputType + ",");
        writer.WriteLine(outputType);
        writer.Indent--;
        writer.WriteLine(">(provider, input, ct)();");

        writer.CloseBlock();
        writer.CloseBlock(false);
        
        SourceText text = SourceText.From(sw.ToString(), Encoding.UTF8);
        return (text, pd);
    }
}
