using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Skybeam;

public class RegistryTextEmitter
{
    public static SourceText CreateSourceText(IReadOnlyList<PipelineDescription> pipelines)
    {
        var sb = new StringBuilder(256);

        sb.AppendLine(
$$"""
using System;
using Microsoft.Extensions.DependencyInjection;
using Skybeam.Abstractions;
using Skybeam;

// <auto-generated
namespace {{PipelineTextEmitter.NamespacePrefix}};

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{PipelineTextEmitter.EmitterAssemblyName.Name}}", "{{PipelineTextEmitter.EmitterAssemblyName.Version}}")]
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]

public class PipelineRegistry : IPipelineRegistry
{
    public void Apply(IServiceCollection services)
    {
""");

        for (int i = 0; i < pipelines.Count; i++)
        {
            var pipeline = pipelines[i];
            var handler = pipeline.HandlerDescription;

            sb.AppendLine(
$$"""
          services.ReplaceWithPipeline<
              IRequestHandler<
                  {{handler.InputFullName}},
                  {{handler.OutputFullName}}>,
              {{handler.FullName}},
              {{pipeline.FullName}}>();
  """);

            if (i < pipelines.Count - 1)
            {
                sb.AppendLine();
            }
        }

        sb.AppendLine(
"""
    }
}
""");

        return SourceText.From(sb.ToString(), Encoding.UTF8);
    }
}