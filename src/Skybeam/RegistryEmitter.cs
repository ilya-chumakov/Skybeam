using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Skybeam;

internal static class RegistryEmitter
{
    public static SourceText CreateSourceText(IReadOnlyList<PipelineDescription> pipelines, string compilationNamespace)
    {
        string registryNamespace = $"{PipelineEmitter.NamespacePrefix}.{compilationNamespace}";

        using var sw = new StringWriter();
        using var writer = new IndentedTextWriter(sw, "    ");

        writer.WriteLine("using System;");
        writer.WriteLine("using Microsoft.Extensions.DependencyInjection;");
        writer.WriteLine("using Skybeam.Abstractions;");
        writer.WriteLine("using Skybeam;");
        writer.WriteLine();

        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine($"namespace {registryNamespace};");
        writer.WriteLine();

        writer.Write("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(");
        writer.WriteLine($"\"{PipelineEmitter.EmitterAssemblyName.Name}\", \"{PipelineEmitter.EmitterAssemblyName.Version}\")]");
        writer.WriteLine("[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]");
        writer.WriteLine();

        writer.WriteLine("public class PipelineRegistry : IPipelineRegistry");
        writer.OpenBlock();

        writer.WriteLine("public void Apply(IServiceCollection services)");
        writer.OpenBlock();

        for (int i = 0; i < pipelines.Count; i++)
        {
            var pipeline = pipelines[i];
            var handler = pipeline.HandlerDescription;

            writer.WriteLine("services.ReplaceWithPipeline<");
            writer.Indent++;
            writer.WriteLine("IRequestHandler<");
            writer.Indent++;
            writer.WriteLine($"{handler.InputFullName},");
            writer.WriteLine($"{handler.OutputFullName}>,");
            writer.Indent--;
            writer.WriteLine($"{handler.FullName},");
            writer.WriteLine($"{pipeline.FullName}>();");

            writer.Indent--;

            if (i < pipelines.Count - 1)
            {
                writer.WriteLine();
            }
        }
        writer.CloseBlock();
        writer.CloseBlock();

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
